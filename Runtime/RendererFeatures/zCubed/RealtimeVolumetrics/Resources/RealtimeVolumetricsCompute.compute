#pragma kernel VolumetricMain

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

#pragma multi_compile_local _ UNITY_STEREO_INSTANCING_ENABLED

//
// URP Only!
//
CBUFFER_START(VOLUMETRICS_CAMERA_DATA)

float4x4 _CameraToWorld;
float4x4 _WorldToCamera;
float4x4 _Projection;
float4x4 _InverseProjection;

CBUFFER_END

struct Ray
{
    float3 origin;
    float3 direction;
};

Ray RayFromViewpoint(float2 vPoint)
{
    Ray ray;
    
    ray.origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;

    ray.direction = mul(_InverseProjection, float4(vPoint, 0, 1)).xyz;
    ray.direction = mul(_CameraToWorld, float4(ray.direction, 0)).xyz;
    ray.direction = normalize(ray.direction);

    return ray;
}

Texture2D<float> _MainShadowmap;
SamplerComparisonState sampler_MainShadowmap;

Texture2D<float> _AdditionalShadowmap;
SamplerComparisonState sampler_AdditionalShadowmap;

//
// URP Constants
//
// Sync these constants with their counterparts!
#define MAX_SHADOW_CASCADES 4
#define MAX_VISIBLE_LIGHTS 256

//
// URP Inputs
//
float4x4 _MainLightWorldToShadow[MAX_SHADOW_CASCADES + 1];
float4 _MainLightFogParams;
float4 _MainLightShadowParams;

half4 _AdditionalShadowParams[MAX_VISIBLE_LIGHTS];
float4x4 _AdditionalLightsWorldToShadow[MAX_VISIBLE_LIGHTS];
float4 _AdditionalLightsFogParams[MAX_VISIBLE_LIGHTS];

//
// Fog Inputs
//
RWTexture3D<float4> _Result;

float4 _PassData; // xy = Texture Dimensions
float4 _FogParams; // x = Steps, y = Far, z = Density, w = Scattering

//
// Fog scattering
//
float MieScattering(float lightDotView, float gScattering)
{
    float result = 1.0f - gScattering * gScattering;
    result /= (4.0f * PI * pow(abs(1.0f + gScattering * gScattering - (2.0f * gScattering) * lightDotView), 1.5f));
    return result;
}

//
// URP borrowed functions
//
float DistanceAttenuation(float distanceSqr, half2 distanceAttenuation)
{
    // We use a shared distance attenuation for additional directional and puctual lights
    // for directional lights attenuation will be 1
    float lightAtten = rcp(distanceSqr);
    float2 distanceAttenuationFloat = float2(distanceAttenuation);

#if SHADER_HINT_NICE_QUALITY
    // Use the smoothing factor also used in the Unity lightmapper.
    half factor = half(distanceSqr * distanceAttenuationFloat.x);
    half smoothFactor = saturate(half(1.0) - factor * factor);
    smoothFactor = smoothFactor * smoothFactor;
#else
    // We need to smoothly fade attenuation to light range. We start fading linearly at 80% of light range
    // Therefore:
    // fadeDistance = (0.8 * 0.8 * lightRangeSq)
    // smoothFactor = (lightRangeSqr - distanceSqr) / (lightRangeSqr - fadeDistance)
    // We can rewrite that to fit a MAD by doing
    // distanceSqr * (1.0 / (fadeDistanceSqr - lightRangeSqr)) + (-lightRangeSqr / (fadeDistanceSqr - lightRangeSqr)
    // distanceSqr *        distanceAttenuation.y            +             distanceAttenuation.z
    half smoothFactor = half(saturate(distanceSqr * distanceAttenuationFloat.x + distanceAttenuationFloat.y));
#endif

    return lightAtten * smoothFactor;
}

half AngleAttenuation(half3 spotDirection, half3 lightDirection, half2 spotAttenuation)
{
    // Spot Attenuation with a linear falloff can be defined as
    // (SdotL - cosOuterAngle) / (cosInnerAngle - cosOuterAngle)
    // This can be rewritten as
    // invAngleRange = 1.0 / (cosInnerAngle - cosOuterAngle)
    // SdotL * invAngleRange + (-cosOuterAngle * invAngleRange)
    // SdotL * spotAttenuation.x + spotAttenuation.y

    // If we precompute the terms in a MAD instruction
    half SdotL = dot(spotDirection, lightDirection);
    half atten = saturate(SdotL * spotAttenuation.x + spotAttenuation.y);
    return atten * atten;
}

// TODO: Optimization
// TODO: Better shadow filtering
// TODO: Soft / Hard shadow switching

[numthreads(8,8,8)]
void VolumetricMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height, depth;
    _Result.GetDimensions(width, height, depth);
    
    float2 uv = float2((float) id.x / (float) width, (float)id.y / (float)height);
    float slice = (float) id.z / (float) depth;
    
    float2 coords = (uv - 0.5) * 2.0;
    Ray sRay = RayFromViewpoint(coords);

    float3 sStart = sRay.origin;
    float3 sEnd = sStart + sRay.direction * _FogParams.y;
    
    float3 sampled = 0;
        
    float3 sPoint = lerp(sStart, sEnd, slice * slice);

    if (length(_MainLightColor) > 0.0)
    {
        float3 shadowPoint = mul(_MainLightWorldToShadow[0], float4(sPoint, 1)).xyz;

        float shadow = 1;
        
        if (_MainLightShadowParams.x > 0)
           shadow = _MainShadowmap.SampleCmpLevelZero(sampler_MainShadowmap, shadowPoint.xy, shadowPoint.z);
    
        float4 params = _MainLightFogParams;

        float LDotV = saturate(dot(-_MainLightPosition.xyz, sRay.direction));
        LDotV = params.x <= 0.0 ? 1.0 : pow(LDotV, params.x);

        float fac = saturate(MieScattering(LDotV, _FogParams.w)) * shadow;
            
        sampled += _MainLightColor.xyz * _FogParams.z * fac;
    }
    
    [loop]
    for (int l = 0; l < _AdditionalLightsCount.x; l++)
    {
        float4 lAtten = _AdditionalLightsAttenuation[l];
        float4 lSpotDir = _AdditionalLightsSpotDir[l];
        
        float3 lVector = _AdditionalLightsPosition[l].xyz - sPoint * _AdditionalLightsPosition[l].w;
        float dSqr = max(dot(lVector, lVector), 0.0);

        half3 lDir = half3(lVector * rsqrt(dSqr));
        half attenuation = half(DistanceAttenuation(dSqr, lAtten.xy) * AngleAttenuation(lSpotDir.xyz, lDir, lAtten.zw));
        
        float4 shadowParams = _AdditionalShadowParams[l];
        int shadowSliceIndex = shadowParams.w;
        
        float shadow;
        if (shadowSliceIndex >= 0)
        {
            if (shadowParams.z)
            {
                float cubemapFaceId = CubeMapFaceID(-lDir);
                shadowSliceIndex += cubemapFaceId;
            }
            
            float4 shadowPoint = mul(_AdditionalLightsWorldToShadow[shadowSliceIndex], float4(sPoint, 1));
            shadowPoint.xyz /= shadowPoint.w;
            
            shadow = _AdditionalShadowmap.SampleCmpLevelZero(sampler_AdditionalShadowmap, shadowPoint.xy, shadowPoint.z);
        }
        else
            shadow = 1;
        
        float4 params = _AdditionalLightsFogParams[l];
        
        float LDotV = saturate(dot(lDir, sRay.direction));
        LDotV = params.x <= 0.0 ? 1.0 : pow(LDotV, params.x);
        
        float fac = saturate(MieScattering(LDotV, _FogParams.w)) * attenuation * shadow;
        
        sampled += _AdditionalLightsColor[l].xyz * _FogParams.z * fac;
    }

    _Result[id.xyz] = float4(sampled, 1);
    //_Result[id.xyz] = float4(sPoint, 1);
}